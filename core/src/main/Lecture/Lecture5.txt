싱글톤 컨테이너
    웹 애플리케이션과 싱글톤
        왜 싱글톤 패턴이 많이쓰이나???
        웹 애플리케이션은 보통 여러 고객이 동시에 요청 -> 메모리 부하가 심하다
        해결방안은 해당 객체가 1개만 생성되고, 요청마다 공유하도록 설계하면 된다 이것이 싱글톤 패턴의 탄생이유

    싱글톤 패턴
        앞서 있던 문제해결?? 어떤 문제 해결??? - 요청이 올때마다 객체를 생성하는 문제해결
        클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴!
        결론은 같은 객체 인스턴스를 2개 이상 생성하지 못하도록 막아야 한다.

        static으로 만들어서 객체 instance를 미리 하나 생성해서 올려둔다.

        컴파일 오류만으로도 다 잡히게 하는것이 잘 설계하는것이다.

        생성자를 public으로 두면 생성해도 되나보다~ 해가지고 생성해버린다 그래서 private으로 하는것

        객체 인스턴스를 생성하는것보다 만들어진것을 가져오는게 비용이 훨씬 적다!!!

        same은 ==
        equal은 자바의 equals와 동일

        일일이 싱글톤 패턴으로 만들어줄 필요가 없다! ( getInstance() ) 하는거 스프링 컨테이너가 알아서 해결해준다. 어떻게???

        싱글톤 패턴은 다양하다.

        싱글톤 컨테이너 == 스프링 컨테이너
        싱글톤 컨테이너는 많은 싱글톤 패턴의 단점을 모두 커버해주면서 장점만 남겨준다 어떻게???

    싱글톤 컨테이너
        딱히 싱글턴 패턴을 적용하지 않아도 객체 인스턴스를 싱글톤으로 관리한다!
        싱글톤 컨테이너 적용 후에는 고객의 요청이 올때마다 이미 만들어진 객체를 공유해서 효율적으로 사용할 수 있다.

    싱글톤 방식의 주의점★
        stateful해서는 안된다! stateless로 설계 해야만 한다!
        무상태로 해야한다. 공유되지 않는 지역변수, 파라미터등을 사용하라.
        실무에서 절대적으로 조심해야하는 부분!

    @Configuration과 싱글톤
        사실 싱글톤을 위해 존재하는 @Configuration

        @Bean memberService -> new MemoryMemberRepository()
        @Bean orderService -> new MemoryMemberRepository()

        MemoryMemberRepository가 2번 생성되니까 싱글톤이 깨지는것이 아닐까??

    @Configuration과 바이트코드 조작의 마법
        아니다 결국 1번밖에 생성되지 않는다 그러면 누가 어떻게 해주길래 1번 호출되는것인가??
        $$를 볼 수있다. 이건 스프링이 바이트코드 조작을 통해서 내가 지정한 것을 빈으로 등록하는것이 아니라
        그 빈을 상속받은 빈을 등록해놓는다.

        @Bean이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 빈이 없으면 생성해서 스프링 빈으로 등록

        @Configuration을 없애면 순수한 자바코드로 실행한다고 보면된다. 3번호출되고, 내가 등록한 객체가 보여진다( $$, CGLIB이 안붙어있는 )

        @Bean만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다.

        설정정보가 필요한 곳에는 @Configuration을 사용하면 된다!
