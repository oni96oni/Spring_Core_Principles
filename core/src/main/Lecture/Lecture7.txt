의존관계 자동 주입
    다양한 의존관계 주입 방법
        주입은 크게 4가지 방법이 있다.
        1. 생성자 주입
        2. 수정자 주입(setter 주입)
        3. 필드 주입
        4. 일반 메서드 주입

        빈 등록이 되면 생성자도 호출이 되어야 한다! @Autowired 있으면 스프링 컨테이너가 주입을 해준다.

        개발에서는 불변이 중요하다. 좋은 아키텍트는 적당한 제한이 있어야 한다. 너무 자유로우면 에러를 찾기 힘들다.

        1. 우리가 기존에 하던것 생성자에 @Autowired 사용
        필수 의존관계를 많이 사용 한다. final 키워드를 붙이면 얘는 무조건 값이 있어야 한다고 지정을 해주는것!
        생성자가 딱 1개만 있으면 @Autowired를 생략가능하다!
        스프링 빈으로 모두 등록, 연관관계 자동주입(di)

        2. setter에 @Autowired 쓰는것이 수정자 주입
        선택, 변경 가능성이 있는 의존 관계에 사용한다.

        3. 필드 주입은 추상화에 의존해놓은것에 @Autowired 사용하는것
        별로 좋지 않은 선택! 외부에서 변경이 불가능해서 테스트가 힘들기 때문.
        결국 세터를 또 만들어야 하기 때문!
        DI 프레임워크가 없으면 아무것도 할 수 없다.
        순수한 테스트를 만들 수 없다.

        4. 일반 메서드
        아무 메서드에나 @Autowired 붙일 수 있긴 하다.
        스프링 빈이아닌 (@Component 가 안붙은) 클래스에서는 @Autowired가 작동하지 않는다.

    옵션 처리
        @Autowired는 required 옵션의 기본값이 true로 되어있다. 그런데 자동주입 대상이 없으면 오류 발생!

    생성자 주입을 선택해라!
        수정자,필드 주입에서 최근에는 대부분 생성자 주입을 권장한다.
        왜??
        불변!
        배우가 정해지면 배우가 바뀔일이 거의 없듯이, 대부분의 의존관계 주입은 한번 주입되면 애플리케이션 종료시점까지 의존관계를 변경할 일이 없다.
        그런데 수정자, 필드주입을 사용하면 setter를 public으로 해놓기 때문에 누군가 변경할 수도있고, 변경될 가능성을 열어두는것은 좋은 설계 x

        누락!

        final키워드!
        생성자 주입을 쓰면 final키워드를 사용 가능 하다.
        final 키워드를 사용하면 의존관계 주입을 받아야 하기때문에 주입을 받지 않으면 컴파일 오류를 띄워준다.

    롬복과 최신 트랜드
        생성자 주입이 좋지만 코드가 좀많다.. 이걸 해결하기위해 필요한 방법은???
        롬복이 알아서 생성자 주입을 해준다. 그리고 final까지 사용가능!
        의존관계를 추가할때, 즉 필드 추가할때 추가할 코드만 작성하면되서 매우 편리하다.

    조회 빈이 2개 이상 - 문제
        @Autowired는 타입으로 조회를 한다.

        @Autowired
        private DiscountPolicy discountPolicy;

        타입으로 조회하기 때문에 다음 코드와 유사하게 동작 ( 실제로는 더 많은 기능을 제공한다. -> 어떤 기능??? )
        ac.getBean(DiscountPolicy.class);

        같은 타입이 2개이면 에러발생
        하위 타입으로 지정할 수도있지만 , DIP위반이다. 그런데 하위타입으로 지정하는것은 어떻게 지정하는것???
        그러면 어떻게 해결해야 할까?

    @Autowired 필드명, @Qualifier, @Primary
        @Autowired 필드명 매칭
        @Qualifier끼리 매칭 -> 빈 이름 매칭
        @Primary사용

        @Autowired는 타입매칭시도 -> 중복되는 빈이 있으면 필드이름, 파라미터이름으로 빈이름을 추가 매칭한다!

        @Qualifier는 추가 구분자를 붙여주는것, 빈 이름을 변경하는것이 아니다.
        그런데 @Qualifier로 주입할때 해당 이름명을 못찾으면?? 주어진 이름의 스프링 빈을 추가로 찾는다.
        @Qualifier는 @Qualifier를 찾는 용도로만 사용하는게 명확하고 좋다.

        @Primary 주입할때 우선순위를 지정하는것
        중복으로 겹치는것이 있으면 우선권을 가진다!
        이걸 많이 쓰는데 왜? Qualifier는 이것저것 많이 붙여야해 primary는 간단.

        primary와 Qualifier가 겹친다면 Qualifier가 우선순위를 가진다.
        스프링은 자동보다는 수동이, 넓은 범위의 선택권 보다는 좁은 범위의 선택권이 우선 순위가 높다!

    애노테이션 직접 만들기
        @Qualifier("mainDiscountPolicy")는 컴파일시 타입 체크가 안된다. 어떻게 해결 할 수 있을까??
        문자는 컴파일 타임에 체크가 안된다.
        애노테이션에는 상속이라는 개념이 없다. 스프링이 지원해주는 기능!

    조회한 빈이 모두  필요할 때  List, Map



