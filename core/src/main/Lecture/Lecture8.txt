빈 생명주기 콜백
    빈 생명주기 콜백 시작
        3가지 방식이 존재, 각 방식마다 배울것이 있다!
        서버가 올라올때 DB와 미리 연결을 맺어놓는다. TCP/IP연결하는데 오래걸려서!
        종료 시점에 안전하게 정상적으로 잘 종료처리하도록하는것을 스프링이 제공한다.

        초기화란것은 외부와 연결을 해서 일을 시작하는것을 말한다.
        즉, 초기화 작업은 의존관계 주입이 모두 완료되고 난 다음에 호출해야한다.
        그런데 의존관계 주입이 모두 완료된지 어떻게 알지???

        스프링에서 초기화 콜백을 준다. 초기화 콜백은 빈이 생성되고 빈의 의존관계 주입이 완료된후 호출하는것

        최대한 생성자에서 다 해버리는게 낫지않은건가???
        객체의 생성과 초기화를 분리하는것이 좋기때문! -> 단일 책임 원칙, 객체 생성은 객체 생성에만 집중하는것이 좋다.

        분리하면 장점?
        생성만 해놓고 기다리다가 처음의 액션이 주어지면 그때 초기화를 호출하는 등의 동작의 '지연'도 할 수 있다.

        스프링은 크게 3가지 방법으로 빈 생명주기 콜백을 지원한다.

    인터페이스 InitializingBean, DisposableBean
        스프링 전용 인터페이스를 가져오는건 조금 부담이 된다. 왜??? 용량문제???
        내가 코드를 고칠수가 없다.
        지금은 사용 x

    빈 등록 초기화, 소멸 메서드
        빈을 등록하는 시점에 초기화와 소멸메서드를 지정해주는것!
        메서드의 이름을 자유롭게 줄 수 있다.
        빈이 스프링 코드에 의존하지 안흔다.
        코드가 아니라 설정 정보를 사용하기 때문에 고칠 수 없는 외부 라이브러리에도 초기화, 종료 메서드를 적용할 수 있다.
        Autocloseable 에대해서 공부해보기

        빈등록할때 destroyMethod속성에는 "(inferred)"가 디폴트로 되어있다. 이 추론기능은 close, shutdown이라는 이름의 메서드를 자동으로 호출한다.
        마치 솔리드의 LSP원칙이 떠오른다. 소멸이니까 자연스럽게 close, shutdown을 쓰겠지 하고 해당 메서드를 자동으로 호출하는것이다.

    애너테이션 @PostConstruct, @PreDestroy
        이 방법을 사용하면 된다!
        패키지가 중요하다. javax 이므로 스프링에 종속된 기술이 아니라 자바표준, 스프링이 아닌 다른 컨테이너에서도 동작한다.
        단점은 외부 라이브러리에는 적용하지 못한다는 점이 있는데 이런 경우 두번째 방법을 이용하자.


뭔가 이 챕터는 크게 와닿지가 않네 아직 제대로 이해를 못한것같다.
