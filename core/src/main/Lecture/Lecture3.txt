스프링 핵심 원리 이해2 - 객체 지향 원리 적용
    스프링 컨테이너의 탄생이유???

    새로운 할인 정책 개발
        성공테스트 뿐만아니라 실패테스트 또한 만들어야한다.
        STATIC IMPORT해서 코드수를 효과적으로 줄일 수 있다.

    새로운 할인 정책 적용과 문제점
        할인 정책을 변경하려면 클라이언트인 OrderServiceImpl코드를 고쳐야한다. -> 여기서 문제점 발견!
        역할과 구현을 충실하게 분리하고, 다형성도 활용하고 인터페이스와 구현객체를 분리했지만
        OCP와 DIP같은 객체지향 설계 원칙을 충실히 준수하지 못했다.

        클라이언트는 인터페이스에만 의존해야하는데 구체(구현) 클래스에 의존하고있다!!
        이것은 DIP를 위반한것
        그리고 FixDiscountPolicy에서 RateDiscountPolicy로 바꾸는 순간 OrderServiceImpl의 소스코드도 변경해야한다,
        이것은 OCP를 위반한것

        어떻게 규약들을 위반하지않고 코딩할 수 있을까?
        일단 구체에 의존하지않게 인터페이스만 선언하는것!
        그런데 구현체가 없는데 어떻게 코드를 실행해??
        누군가 클라이언트인 OrderServiceImpl에 DiscountPlicy의 구현객체를 대신 생성하고 '주입'해주어야 한다.

    관심사의 분리
        관심사의 분리를 위해서 공연기획자가 필요하다! 배우와 공연 기획자의 책임을 확실히 분리해야 한다.
        AppConfig - 나의 애플리케이션 전체를 구성하고 설정한다는 뜻
        환경설정에 관한것은 AppConfig에서 모두 설정한다. 앞으로는 직접 new하지 않고 이를 이용해서 생성한다.
        final이 되어있으면 생성자를 통해서 할당이 되어야만 한다

        이렇게 생성자를 통해서 구현체를 받으면 어떤 구현체를 받을지 전혀 알지 못한다!
        AppConfig는 생성한 객체 인스턴스의 참조(레퍼런스)를 생성자를 통해서 주입(연결)해준다.

        @BeforeEach는 실행 하기전에 붙여주는것!!

    AppConfig 리팩터링
        현재는 중복도 좀 있고 역할에 따른 구현이 잘 보이지 않는다! 리팩터링 필요

    새로운 구조와 할인 정책 적용
        이제 어디만 바꾸어도될까?!?!
        AppConfig만 바꾸면 된다!!
        AppConfig의 등장으로 애플리케이션이 사용영역과 구성영역으로 나뉘었다.
        구성영역의 코드만 고치면 되고 사용영역의 코드는 고칠일이 없어졌다,
        xml까지 쓰면 자바코드 자체를 손대지않을수도 있다.

    전체 흐름 정리
        하나의 객체가 다양한 책임을 져서는 안된다! -> 단일 책임 원칙 위반

    좋은 객체 지향 설계의 5가지 원칙의 적용
        SRP 단일 책임 원칙
            관심사를 분리시켜서 클라이언트는 실행만, 직접 구현 객체를 생성하고 연결하는 책임은 AppConfig에게 부여함으로써 책임을 분리시켰다.

        DIP 의존관계 역전 원칙
            추상화에 의존해야지, 구체화에 의존하면 안된다. -> 의존관계 주입
            AppConfig를 통해서 주입

        OCP 확장에 열려있고 변경에 닫혀있어야 한다.
            다형성을 사용하고 클라이언트가 DIP를 지켜야한다.
            변경에 닫혀있다 -> 변경할 필요가 없다.
            AppConfig만 변경하면 클라이언트 코드는 변경할 필요가 없었으니까!

    IoC, DI, 그리고 컨테이너
        내가 호출하는것이 아니라 프레임워크같은것이 호출해주는것!
        클라이언트 구현 객체가 필요할때마다 객체 생성, 연결, 실행등을 하였다 자연스럽게
        AppConfig가 등장 한 이후로는 인터페이스만 호출하므로 어떤 구현객체가 들어올지 전혀 모른다!

        프레임워크 vs 라이브러리
        내가 작성한 코드를 프레임워크가 제어하고 실행하면 프레임워크
        내가 작성한 코드가 직접 제어의 흐름을 담당하면 라이브러리

        의존관계 주입 DI
        정적인 클래스 의존관계 - 코드만 보고 판단할 수 있다. 실행하지 않고도
        실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계 - 어떠한 객체가 주입받을지 실행하고 나서야 알 수있잖아!

        의존관계 주입이란 애플리케이션 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에서 전달해서 클라이언트와 서버의 실제
        의존 관계가 연결되는것을 말한다.

    IoC 컨테이너, DI 컨테이너
        IoC, DI를 해주는 컨테이너!!
        컨테이너는 의존관계 주입을 위한 객체이다.
        그냥 AppConfig같은걸 DI컨테이너라고 부르는것

    스프링으로 전환하기
        class에 @Configuration을 붙여주면 설정정보를 담당하는것
        각 메서드에 @Bean이라 적으면 스프링 컨테이너라는 곳에 올라간다.
        올라갈때 key / value 형태로 메서드이름이 key, 반환값이 value 형태로 올라간다.

        AppConfig 보다 스프링 컨테이너가 어떤점이 더 나은가?? 어떤 이점을 볼 수있나???

