스프링의 핵심 개념, 컨셉?
    스프링은 자바 언어 기반의 프레임워크
    자바 언어의 가장 큰 특징은 객체 지향 언어라는점!
    스프링은 객체 지향언어가 가장 강력한 특징을 살려내는 프레임워크
    스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크입니다.

    즉, 좋은 객체 지향이 궁극적인 목표

    스프링을 보면서 얼마나 객체 지향적으로 코딩할 수 있게 만들어 놓았는지 살펴보자

좋은 객체 지향 프로그래밍?
    객체 지향 특징 - 캡, 상, 추, 다

    객체들의 모임, 객체들은 서로 메시지를 주고받고 유연하고 변경이 용이하다!
    컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법

    다형성이 궁극적인 핵심!!

    진짜 다형성이란?
        ex) 역할과 그 역할을 행하는 구현으로 세상을구분해보자.
            k3를 타다 아반떼를 타도 자동차를 운전하는데 전혀 문제가 없다. 구현체가 중요한것이 아니다.
            왜 문제가 없냐면 역할에 따라서 구현해놨기 때문
            이렇게 하는 이유는 운전자(클라이언트) 때문! 구현(자동차 모델)이 바뀌어도 운전자에게 영향을 주지 않는다.
            또한 이러한 이유로 자동차 역할만 구현해낸다면 무한히 '확장'이 가능하다. 핵심은 클라이언트에게 영향을 주지않으면서 새로운 기능을 제공할 수 있다는것이 핵심!!

        ex2) 공연을 한다치면은 역할은 대체가 가능해야한다! 이렇게 역할과 구현을 나누면
        변경가능한 대체구조가 된다!!

    역할과 구현을 분리
        역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 단순해진다.
        클라이언트는 대상의 역할(인터페이스)만 알면된다.
        클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
        클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
        클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.

        역할 = 인터페이스
        구현 = 인터페이스를 구현한 클래스, 구현 객체

        객체를 설계할 때 역할과 구현을 명확히 분리!!
        객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기
        핵심은 구현보다 인터페이스가 먼저!!!

    자바 언어의 다형성
        선언부는 동일하고, 구현부는 다르게 할 수있다.

    다형성의 본질
        인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
        다형성의 본질을 이해하려면 협력이ㅣ라는 객체사이의 관게에서 시작해야함
        ★★★클라이언트를 변경하지 않고 서버의 구현 기능을 유연하게 변경할 수 있는것이 다형성의 본질이다!!

    역할과 구현을 분리
        실세계의 역할과 구현이라는 편리한 컨셉을 다형성을 통해 객체 세상으로 가져올 수 있음 - 테슬라라는 차가 나와도 운전면허가 있으면 타는데 전혀문제없잖아?
        유연하고, 변경이 용이 - 클라이언트와 기존의 코드에 변경을 주지 않으면서 확장가능,
        확장 가능한 설계
        클라이언트에 영향을 주지 않는 변경 가능
        인터페이스를 안정적으로 잘 설계하는 것이 중요

    이런 인터페이스의 한계점은?
        역할(인터페이스) 자체가 변하면, 클라이언트, 서버 모두에 큰 변경이 발생한다.
        자동차를 비행기로 변경해야 한다면?
        대본 자체가 변경된다면?
        USB 인터페이스가 변경된다면?

        ★★★인터페이스를 안정적으로 잘 설계하는 것이 제일 중요하다

        다형성과 더불어서 좋은 객체 지향 코딩을 위해서는 SOLID도 같이 필요하다!

좋은 객체 지향 설계의 5가지 원칙(SOLID)
    SRP : Single Responsibility Principle (단일 책임 원칙)
        중요한 기준은 변경! 무언가 변경할때 처음부터 다 뜯어 고치면 그것은 설계부터 잘못된것!
        변경이 있을때 하나의 지점만 딱 고쳐야 단일 책임의 원칙을 잘 지킨다고 볼 수있다!
    OCP : Open-Closed Principle (열린-닫힌 원칙)
        ★★★ 가장중요! 말이 안되지만..
        확장에는 열려 있으나 변경에는 닫혀있어야 한다.
        어떻게 코드의 변경없이 기능을 추가해?
        인터페이스를 구현한 새로운 클래스를 하나 만드는것은 기존의 코드 변경이 전혀 없다!
        하지만 구현 객체를 변경하려면 클라이언트 코드를 변경해야한다.
        분명 다형성을 사용했지만 OCP원칙을 지킬 수 없다.
        그럼 이런 문제는 어떻게 해결? 관계를 맺어주는 별도의 조립이 필요하다! 바로 스프링 컨테이너가 해준다. IoC등 사용해서
    LSP : Liskov Substitution Principle (리스코스 대체 원칙)
        자동차라는 인터페이스가 있으면 k3라는 구현체에서 엑셀을 밟으면 앞으로 나아가야한다.
        즉 규약이 정해져있으면(인터페이스 규약) 구현한 하위 클래스는 그 규약을 철저히 지켜야한다.
    ISP : Interface Segregation Principle (인터페이스 분할 원칙)
        인터페이스의 덩어리가 크면 공통된 규약들을 모아서 인터페이스를 나누는것!
    DIP : Dependency Inversion Principle (종속성 역전 원칙)
        ★★ 추상화에 의존해야지, 구체화에 의존해서는 안된다. 구현체말고 인터페이스에 의존하라!
        클라이언트 코드는 구현코드가아니라 인터페이스만 바라보아야 한다!
        의존한다는것은 저 코드에 대해서 안다면은 다 의존한다는것으로 본다.
        어떻게 클래스 레벨에서 설계할때 인터페이스만 의존하게 설계???

    정리 : 다형성 만으로는 OCP,DIP를 지킬 수 없다. 뭔가 더 필요하다. 무엇?

객체 지향 설계와 스프링
    스프링은 DI, DI컨테이너로 다형성 + OCP, DIP를 가능하게 지원해준다!
    이것들을 통해서 클라이언트 코드의 변경 없이 기능을 확장할 수 있다.

총정리
    모든 설계에 역할과 구현을 분리해야한다. (인터페이스와 구현체)
    구현체는 언제든지 유연하게 변경할 수 있도록 만드는 것이 좋은 객체 지향 설계이다.
    모든 설게에 인터페이스를 부여하자 (이상적으로는)
    하지만...
    인터페이스를 도입하면 추상화라는 비용이 발생 -> 무슨 뜻? 개발자 코드를 한번 더 열어보아야 한다.

    컨테이너를 만들어야 하는이유?

    OCP와 DIP를 지키려면 어떤것을 만들어야해?
